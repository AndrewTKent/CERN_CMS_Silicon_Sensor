import osimport numpy  as npimport pandas as pdimport matplotlib.pyplot as pltfrom math import log10, floor# Is NaN Functiondef isNaN(num):    return num != num# Significant Figures Functiondef round_sig(x, sig=6, small_value=1.0e-9):    if isNaN(x) == True:        return x    else:        return round(x, sig - int(floor(log10(max(abs(x), abs(small_value))))) - 1)    # Diode Names for Plotting diode_names = ['DIODE', 'DIODEHALF', 'DIODEHALFPSTOP', 'DIODEHALFPSTOP_GR', 'DIODEQUARTER']current_color = ["red", "blue", "green"]table_label = ['I(600V)', 'I(800V)', 'I(1000V)', 'DepV']scale_factor = [10**6, 10**9]# Current Working Directorycwd = os.getcwd()# Convert .txt File to .csv Filedef txt_to_csv(file):    with open(str(file)+'.txt') as fin, open(str(file)+'.csv', 'w') as fout:        for line in fin:            fout.write(line.replace('\t', ','))# List all of the Files in the Current Working Directory search_path = '.'   # set your path here.root, dirs, files = next(os.walk(search_path), ([],[],[]))# Find the Number of Each Diodenum_DIODE = 0num_HALF = 0num_PSTOP = 0num_GR = 0num_QUARTER = 0for i in range(0, len(dirs)):    sub_root, sub_dirs, sub_files = next(os.walk(dirs[i]), ([],[],[]))        # Make a path for each sub diode id, use this to get to the table with the current values    for j in range(0, len(sub_dirs)):           path = str(dirs[i])+'/' + str(sub_dirs[j])+'/CumulData'        print(path)        txt_to_csv(path)        CumulData = pd.read_csv(path + '.csv')        for k in range(0,len(CumulData['File'])):                                        if "QUARTER" in CumulData['File'][k]:                 num_QUARTER += 1                                        elif "GR" in CumulData['File'][k]:                 num_GR += 1                                            elif "PSTOP" in CumulData['File'][k]:                 num_PSTOP += 1                            elif "HALF" in CumulData['File'][k]:                 num_HALF += 1                            elif "DIODE" in CumulData['File'][k]:                 num_DIODE += 1# Iterate Over All The Files, Begin Creating Graphs diodes = {}diode = {}half = {}pstop = {}gr = {}quarter = {}# Names of Diodesdiodes_name = []diode_name = []half_name = []pstop_name = []gr_name = []quarter_name = []# Reshape to the Size of the Necessary Vectordiode = np.zeros(num_DIODE*4).reshape(num_DIODE,4)half = np.zeros(num_HALF*4).reshape(num_HALF,4)pstop = np.zeros(num_PSTOP*4).reshape(num_PSTOP,4)gr = np.zeros(num_GR*4).reshape(num_GR,4)quarter = np.zeros(num_QUARTER*4).reshape(num_QUARTER,4)int_DIODE = 0int_HALF = 0int_PSTOP = 0int_GR = 0int_QUARTER = 0for i in range(0, len(dirs)):    sub_root, sub_dirs, sub_files = next(os.walk(dirs[i]), ([],[],[]))    diodes[dirs[i]] = np.zeros(len(sub_dirs)*5*4).reshape(len(sub_dirs),5,4)    plt.figure(figsize=(10,8))        # Make a path for each sub diode id, use this to get to the table with the current values    for j in range(0, len(sub_dirs)):           path = str(dirs[i])+'/' + str(sub_dirs[j])+'/CumulData'        txt_to_csv(path)        CumulData = pd.read_csv(path + '.csv')        for k in range(0,len(CumulData['File'])):                        # Fill data in dict, do this for as many rows there are in the .csv            for v in range(0,4):                                            if "QUARTER" in CumulData['File'][k]:                     diodes[dirs[i]][j,4,v] = CumulData[table_label[v]][k]                    quarter[int_QUARTER,v] = CumulData[table_label[v]][k]                                           if v == 3:                        quarter_name.append(str(dirs[i]) + '_' + str(sub_dirs[j]))                        int_QUARTER += 1                                                            elif "GR" in CumulData['File'][k]:                     diodes[dirs[i]][j,3,v] = CumulData[table_label[v]][k]                    gr[int_GR,v] = CumulData[table_label[v]][k]                                           if v == 3:                        gr_name.append(str(dirs[i]) + '_' + str(sub_dirs[j]))                        int_GR += 1                                                elif "PSTOP" in CumulData['File'][k]:                     diodes[dirs[i]][j,2,v] = CumulData[table_label[v]][k]                    pstop[int_PSTOP,v] = CumulData[table_label[v]][k]                                           if v == 3:                        pstop_name.append(str(dirs[i]) + '_' + str(sub_dirs[j]))                        int_PSTOP += 1                                elif "HALF" in CumulData['File'][k]:                     diodes[dirs[i]][j,1,v] = CumulData[table_label[v]][k]                    half[int_HALF,v] = CumulData[table_label[v]][k]                                           if v == 3:                        half_name.append(str(dirs[i]) + '_' + str(sub_dirs[j]))                        int_HALF += 1                                elif "DIODE" in CumulData['File'][k]:                     diodes[dirs[i]][j,0,v] = CumulData[table_label[v]][k]                     diode[int_DIODE,v] = CumulData[table_label[v]][k]                                           if v == 3:                        diode_name.append(str(dirs[i]) + '_' + str(sub_dirs[j]))                        int_DIODE += 1        for w in range(0,5):                        for z in range(0,3):                                # Scale factor depending on whether the diode has been irradiated or not                if "PostIrrad" in cwd:                        factor = scale_factor[0]                        else:                    factor = scale_factor[1]                                # Check to make sure sensible values are in the table                if diodes[dirs[i]][j,w,z] == 0:                    continue                                 else:                    plt.plot(sub_dirs[j]+'_'+diode_names[w],-1*diodes[dirs[i]][j,w,z]*factor, marker=".", markersize=20, color = current_color[z])                            if len(sub_dirs[j]) >= 2 and j == 0 and w == 0:                    plt.plot(sub_dirs[j]+'_DIODE',-1*diodes[dirs[i]][j,w,z]*factor, marker=".", markersize=20, color = current_color[z], label = table_label[z])                # Scale plots depending on whether diodes have been irradiated or not        if "PostIrrad" in cwd:                plt.title('Irradiated Batch '+dirs[i]+'_HM_XX Diodes', size=15)            plt.ylabel(r'Current $[\mu A]$', size=15)                else:            plt.title('Unirradiated Batch '+dirs[i]+'_HM_XX Diodes', size=15)             plt.ylabel(r'Current $[nA]$', size=15)                plt.legend(loc = 'best')        plt.xticks(rotation=30, size=7)        # Save all the plots corresponding to the same batch to one .png        plt.savefig(dirs[i]+'.png')    # Make a table of Depletion Valuesfig, axs = plt.subplots(len(dirs),1)dirs = ['34330_2S', '34331_2S', '34252','34253', '34254', '34340', '34341', '34343', '36696'] #dirs = ['34330_2S', '34331_2S', '34252', '34253', '34254', '34340', '34341', '34343', '36696', '36697', '37398', '37399']for i in range(0, len(dirs)):    row_labels = []    table_data = []    row_labels = []    temp_array = []     column_labels = ['DIODE', 'DIODEHALF', 'DIODEHALFPSTOP', 'DIODEHALFPSTOP_GR', 'DIODEQUARTER']    sub_root, sub_dirs, sub_files = next(os.walk(dirs[i]), ([],[],[]))        for t in range(0,len(sub_dirs)):        row_labels.append('Batch '+ str(dirs[i]) + '_' +  str(sub_dirs[t]))        temp_array = []        print(row_labels)                   for b in range(0,5):            temp_array.append(round_sig(diodes[dirs[i]][t,b,3], 6, 1.0e-9))                 table_data.append(temp_array)                          df = pd.DataFrame( table_data, columns = column_labels)    axs[i].patch.set_visible(False)    #axs[i].axis('tight')    axs[i].axis('off')    axs[i].table(cellText = df.values, colLabels = df.columns, rowLabels = row_labels, loc="center")    if "PostIrrad" in cwd:     fig.suptitle(r'Halfmoon Diodes Post Irradiation Depletion Voltages $[V]$', fontsize=12)    fig.tight_layout()    plt.subplots_adjust(left=.3, bottom=None, right=.9, top=.9, wspace=None, hspace=1.2)    plt.savefig('PostIrrad_DepV_Table' + '.png', dpi=700)    plt.show()        else:    fig.suptitle(r'Halfmoon Diodes Pre Irradiation Depletion Voltages $[V]$', fontsize=10)    fig.tight_layout()    plt.subplots_adjust(left=.3, bottom=.05, right=.98, top=.93, wspace=2, hspace=3.1)    plt.savefig('PreIrrad_DepV_Table' + '.png', dpi=900)    plt.show()                #%% # Make Graphs for Each Diode# DIODE Graph plt.figure(figsize=(10,8))for i in range(0, num_DIODE):       for j in range(0,3):                        # Scale factor depending on whether the diode has been irradiated or not        if "PostIrrad" in cwd:                factor = scale_factor[0]                else:            factor = scale_factor[1]                        # Check to make sure sensible values are in the table        if diode[i,j] == 0:            continue                         else:            plt.plot(diode_name[i],-1*diode[i,j]*factor, marker=".", markersize=20, color = current_color[j])                    if i == 0:            plt.plot(diode_name[i],-1*diode[i,j]*factor, marker=".", markersize=20, color = current_color[j], label = table_label[j])                    # Scale plots depending on whether diodes have been irradiated or not        if "PostIrrad" in cwd:                plt.title('Irradiated DIODE', size=15)            plt.ylabel(r'Current $[\mu A]$', size=15)                else:            plt.title('Unirradiated DIODE', size=15)             plt.ylabel(r'Current $[nA]$', size=15)                plt.legend(loc = 'best')        plt.xticks(rotation=30, size=7)    # Save all the plots corresponding to the same batch to one .png    plt.savefig('DIODE'+'.png')#%%# DIODEHALF Graph   plt.figure(figsize=(10,8)) for i in range(0, num_HALF):       for j in range(0,3):                        # Scale factor depending on whether the diode has been irradiated or not        if "PostIrrad" in cwd:                factor = scale_factor[0]                else:            factor = scale_factor[1]                        # Check to make sure sensible values are in the table        if half[i,j] == 0:            continue                         else:            plt.plot(half_name[i],-1*half[i,j]*factor, marker=".", markersize=20, color = current_color[j])                    if i == 0:            plt.plot(half_name[i],-1*half[i,j]*factor, marker=".", markersize=20, color = current_color[j], label = table_label[j])                    # Scale plots depending on whether diodes have been irradiated or not        if "PostIrrad" in cwd:                plt.title('Irradiated DIODEHALF', size=15)            plt.ylabel(r'Current $[\mu A]$', size=15)                else:            plt.title('Unirradiated DIODEHALF', size=15)             plt.ylabel(r'Current $[nA]$', size=15)                plt.legend(loc = 'best')        plt.xticks(rotation=30, size=7)    # Save all the plots corresponding to the same batch to one .png    plt.savefig('DIODEHALF'+'.png')#%%# DIODEHALFPSTOP Graph plt.figure(figsize=(10,8))for i in range(0, num_PSTOP):       for j in range(0,3):                        # Scale factor depending on whether the diode has been irradiated or not        if "PostIrrad" in cwd:                factor = scale_factor[0]                else:            factor = scale_factor[1]                        # Check to make sure sensible values are in the table        if pstop[i,j] == 0:            continue                         else:            plt.plot(pstop_name[i],-1*pstop[i,j]*factor, marker=".", markersize=20, color = current_color[j])                    if i == 0:            plt.plot(pstop_name[i],-1*pstop[i,j]*factor, marker=".", markersize=20, color = current_color[j], label = table_label[j])                    # Scale plots depending on whether diodes have been irradiated or not        if "PostIrrad" in cwd:                plt.title('Irradiated DIODEHALFPSTOP', size=15)            plt.ylabel(r'Current $[\mu A]$', size=15)                else:            plt.title('Unirradiated DIODEHALFPSTOP', size=15)             plt.ylabel(r'Current $[nA]$', size=15)                plt.legend(loc = 'best')        plt.xticks(rotation=30, size=7)    # Save all the plots corresponding to the same batch to one .png    plt.savefig('DIODEHALFPSTOP'+'.png')    #%%# DIODEHALFPSTOP_GR Graph plt.figure(figsize=(10,8))for i in range(0, num_GR):       for j in range(0,3):                        # Scale factor depending on whether the diode has been irradiated or not        if "PostIrrad" in cwd:                factor = scale_factor[0]                else:            factor = scale_factor[1]                        # Check to make sure sensible values are in the table        if gr[i,j] == 0:            continue                         else:            plt.plot(gr_name[i],-1*gr[i,j]*factor, marker=".", markersize=20, color = current_color[j])                    if i == 0:            plt.plot(gr_name[i],-1*gr[i,j]*factor, marker=".", markersize=20, color = current_color[j], label = table_label[j])                    # Scale plots depending on whether diodes have been irradiated or not        if "PostIrrad" in cwd:                plt.title('Irradiated DIODEHALFPSTOP_GRConnected', size=15)            plt.ylabel(r'Current $[\mu A]$', size=15)                else:            plt.title('Unirradiated DIODEHALFPSTOP_GRConnected', size=15)             plt.ylabel(r'Current $[nA]$', size=15)                plt.legend(loc = 'best')        plt.xticks(rotation=30, size=7)    # Save all the plots corresponding to the same batch to one .png    plt.savefig('DIODEHALFPSTOP_GR'+'.png')    #%%# DIODEQUARTER Graph plt.figure(figsize=(10,8))for i in range(0, num_QUARTER):       for j in range(0,3):                        # Scale factor depending on whether the diode has been irradiated or not        if "PostIrrad" in cwd:                factor = scale_factor[0]                else:            factor = scale_factor[1]                        # Check to make sure sensible values are in the table        if quarter[i,j] == 0:            continue                         else:            plt.plot(quarter_name[i],-1*quarter[i,j]*factor, marker=".", markersize=20, color = current_color[j])                    if i == 0:            plt.plot(quarter_name[i],-1*quarter[i,j]*factor, marker=".", markersize=20, color = current_color[j], label = table_label[j])                    # Scale plots depending on whether diodes have been irradiated or not        if "PostIrrad" in cwd:                plt.title('Irradiated DIODEQUARTER', size=15)            plt.ylabel(r'Current $[\mu A]$', size=15)                else:            plt.title('Unirradiated DIODEQUARTER', size=15)             plt.ylabel(r'Current $[nA]$', size=15)                plt.legend(loc = 'best')        plt.xticks(rotation=30, size=7)    # Save all the plots corresponding to the same batch to one .png    plt.savefig('DIODEQUARTER'+'.png')    #%%            