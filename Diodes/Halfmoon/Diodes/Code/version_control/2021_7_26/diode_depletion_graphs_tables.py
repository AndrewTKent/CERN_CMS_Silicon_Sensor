import osimport numpy  as npimport pandas as pdimport matplotlib.pyplot as pltfrom math import log10, floor# Is NaN Functiondef isNaN(num):    return num != num# Significant Figures Functiondef round_sig(x, sig=6, small_value=1.0e-9):    if isNaN(x) == True:        return x    else:        return round(x, sig - int(floor(log10(max(abs(x), abs(small_value))))) - 1)    # Diode Names for Plotting diode_names = ['_DIODE', '_DIODEHALF', '_DIODEHALFPSTOP', '_DIODEHALFPSTOP_GR', '_DIODEQUARTER']current_color = ["red", "blue", "green"]table_label = ['I(600V)', 'I(800V)', 'I(1000V)', 'DepV']scale_factor = [10**6, 10**9]# Current Working Directorycwd = os.getcwd()# Convert .txt File to .csv Filedef txt_to_csv(file):    with open(str(file)+'.txt') as fin, open(str(file)+'.csv', 'w') as fout:        for line in fin:            fout.write(line.replace('\t', ','))# List all of the Files in the Current Working Directory search_path = '.'   # set your path here.root, dirs, files = next(os.walk(search_path), ([],[],[]))# Iterate Over All The Files, Begin Creating Graphs diodes = {}for i in range(0, len(dirs)):    sub_root, sub_dirs, sub_files = next(os.walk(dirs[i]), ([],[],[]))    diodes[dirs[i]] = np.zeros(len(sub_dirs)*5*4).reshape(len(sub_dirs),5,4)    plt.figure(figsize=(10,8))        # Make a path for each sub diode id, use this to get to the table with the current values    for j in range(0, len(sub_dirs)):           path = str(dirs[i])+'/' + str(sub_dirs[j])+'/CumulData'        txt_to_csv(path)        CumulData = pd.read_csv(path + '.csv')        for k in range(0,len(CumulData['File'])):                        # Fill data in dict, do this for as many rows there are in the .csv            for v in range(0,4):                                            if "QUARTER" in CumulData['File'][k]:                     diodes[dirs[i]][j,4,v] = CumulData[table_label[v]][k]                                            elif "GR" in CumulData['File'][k]:                     diodes[dirs[i]][j,3,v] = CumulData[table_label[v]][k]                                                elif "PSTOP" in CumulData['File'][k]:                     diodes[dirs[i]][j,2,v] = CumulData[table_label[v]][k]                                elif "HALF" in CumulData['File'][k]:                     diodes[dirs[i]][j,1,v] = CumulData[table_label[v]][k]                                elif "DIODE" in CumulData['File'][k]:                     diodes[dirs[i]][j,0,v] = CumulData[table_label[v]][k]                               for w in range(0,5):                        for z in range(0,3):                                # Scale factor depending on whether the diode has been irradiated or not                if "PostIrrad" in cwd:                        factor = scale_factor[0]                        else:                    factor = scale_factor[1]                                # Check to make sure sensible values are in the table                if diodes[dirs[i]][j,w,z] == 0:                    continue                                 else:                    plt.plot(sub_dirs[j]+diode_names[w],-1*diodes[dirs[i]][j,w,z]*factor, marker=".", markersize=20, color = current_color[z])                            if len(sub_dirs[j]) >= 2 and j == 0 and w == 0:                    plt.plot(sub_dirs[j]+'_DIODE',-1*diodes[dirs[i]][j,w,z]*factor, marker=".", markersize=20, color = current_color[z], label = table_label[z])                # Scale plots depending on whether diodes have been irradiated or not        if "PostIrrad" in cwd:                plt.title('Irradiated Batch '+dirs[i]+'_PSS_HM_XX Diodes', size=15)            plt.ylabel(r'Current $[\mu A]$', size=15)                else:            plt.title('Unirradiated Batch '+dirs[i]+'_PSS_HM_XX Diodes', size=15)             plt.ylabel(r'Current $[nA]$', size=15)                plt.legend(loc = 'best')        plt.xticks(rotation=30, size=7)        # Save all the plots corresponding to the same batch to one .png        plt.savefig(dirs[i]+'.png')        # Make a table of Depletion Values    fig = plt.figure(figsize = (10, 2))    ax = fig.add_subplot(111)    table_data = []    row_labels = []    temp_array = []    column_labels = ['DIODE', 'DIODEHALF', 'DIODEHALFPSTOP', 'DIODEHALFPSTOP_GR', 'DIODEQUARTER']        for t in range(0,len(sub_dirs)):        row_labels.append('Batch '+ str(sub_dirs[t]))        temp_array = []                for b in range(0,5):            temp_array.append(round_sig(diodes[dirs[i]][t,b,3], 6, 1.0e-9))                         table_data.append(temp_array)        df = pd.DataFrame( table_data, columns = column_labels)    fig.patch.set_visible(False)    ax.axis('tight')    ax.axis('off')    ax.table(cellText = df.values, colLabels = df.columns, rowLabels = row_labels,loc="center")        if "PostIrrad" in cwd:            ax.set_title(label = "Irradiated Halfmoon "+str(dirs[i]) +r" Depletion Voltages $[V]$")            else:        ax.set_title(label = "Unirradiated Halfmoon "+str(dirs[i]) +r" Depletion Voltages $[V]$")            fig.tight_layout()    plt.savefig(dirs[i] + '_table' + '.png', dpi=500)    plt.show()                    